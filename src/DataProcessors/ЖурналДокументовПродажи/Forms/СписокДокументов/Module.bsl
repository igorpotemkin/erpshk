&НаСервере
Процедура Расш1_КомандаУстановитьОригинаНеполученПослеНаСервере(ВыделенныеСтроки)
    Для Каждого Строка Из ВыделенныеСтроки Цикл
        ЕСли ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
            НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
            НаборЗаписей.Отбор.Документ.Установить(Строка.Ссылка);
            НаборЗаписей.Прочитать();
            НаборЗаписей.Очистить();
            Запись = НаборЗаписей.Добавить();
            ЗаполнитьЗначенияСвойств(Запись, Строка);
            Запись.Документ = Строка.Ссылка;
            Запись.Статус = Перечисления.СтатусыДокументовПоступления.ОригиналНеПолучен;
            НаборЗаписей.Записать(1);
        КонецЕСли;
 
    КонецЦикла;
КонецПроцедуры
 
&НаКлиенте
Процедура Расш1_КомандаУстановитьОригинаНеполученПосле(Команда)
 
    ВыделенныеСтроки = Элементы.СписокДокументыПродажи.ВыделенныеСтроки;
    Расш1_КомандаУстановитьОригинаНеполученПослеНаСервере(ВыделенныеСтроки);
    Элементы.СписокДокументыПродажи.Обновить();
 
КонецПроцедуры
 
&НаСервере
Процедура Расш1_КомандаУстановитСтатусПолученПослеНаСервере(ВыделенныеСтроки)
Для Каждого Строка Из ВыделенныеСтроки Цикл
    ЕСли ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
        НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Документ.Установить(Строка.Ссылка);
        НаборЗаписей.Прочитать();
        НаборЗаписей.Очистить();
        Запись = НаборЗаписей.Добавить();
        ЗаполнитьЗначенияСвойств(Запись, Строка);
        Запись.Документ = Строка.Ссылка;
        Запись.Статус = Перечисления.СтатусыДокументовПоступления.ОригиналПолучен;
        НаборЗаписей.Записать(1);
    КонецЕсли;
 
КонецЦикла;
КонецПроцедуры
 
&НаКлиенте
Процедура Расш1_КомандаУстановитСтатусПолученПосле(Команда)
    ВыделенныеСтроки = Элементы.СписокДокументыПродажи.ВыделенныеСтроки;
    Расш1_КомандаУстановитСтатусПолученПослеНаСервере(ВыделенныеСтроки);
    Элементы.СписокДокументыПродажи.Обновить();
    
КонецПроцедуры  

&НаСервере
Процедура Расш1_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	//zaitsev@syspod.ru 79557
			ТаблицаФормы = Элементы.СписокДокументыПродажи;
			КолонкаВставки = ТаблицаФормы.ПодчиненныеЭлементы.Найти("ГруппаОперацияТип");	 
			НовыйЭлемент = Элементы.Вставить("ЕстьФайлыСкрепка", Тип("ПолеФормы"), ТаблицаФормы, КолонкаВставки);	
			СписокДокументыПродажи.ТекстЗапроса=СтрЗаменить(СписокДокументыПродажи.ТекстЗапроса, "РеестрДокументов.НомерДокументаИБ КАК Номер,", "РеестрДокументов.НомерДокументаИБ КАК Номер,"+Символы.ПС+"НаличиеПрисоединенныхФайлов.ЕстьФайлы КАК ЕстьФайлыСкрепка,");
			СписокДокументыПродажи.ТекстЗапроса=СтрЗаменить(СписокДокументыПродажи.ТекстЗапроса,"РегистрСведений.РеестрДокументов КАК РеестрДокументов","РегистрСведений.РеестрДокументов КАК РеестрДокументов"+Символы.ПС+"{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеПрисоединенныхФайлов ПО РеестрДокументов.Ссылка = НаличиеПрисоединенныхФайлов.ОбъектСФайлами}");
			НовыйЭлемент.ПутьКДанным = "СписокДокументыПродажи.ЕстьФайлыСкрепка"; 
			//Сообщить(СписокДокументыЗакупки.ТекстЗапроса);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеКартинки;
			НовыйЭлемент.КартинкаЗначений=БиблиотекаКартинок.Скрепка;  
			НовыйЭлемент.КартинкаШапки=БиблиотекаКартинок.Скрепка; 
			НовыйЭлемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Нет;
       //zaitsev@syspod.ru 79557
КонецПроцедуры

&НаКлиенте
Процедура Расш1_СписокДокументыПродажиВыборПосле(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ЕстьФайлыСкрепка" Тогда
		СтандартнаяОбработка = Ложь;
		СтрокаСписка = Элементы.СписокДокументыПродажи.ТекущиеДанные;
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
			Новый Структура("ВладелецФайла", СтрокаСписка.Ссылка),
			ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

//&Вместо("ПриСозданииНаСервере")
//Процедура Расш1_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//	УстановитьУсловноеОформление();
//	
//	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
//		Возврат;
//	КонецЕсли;
//	
//	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
//	
//	Если ПустаяСтрока(Параметры.КлючНазначенияФормы) Тогда
//		КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию();
//	Иначе
//		КлючНазначенияИспользования = Параметры.КлючНазначенияФормы;
//	КонецЕсли;
//	
//	Если КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию() Тогда
//		КлючНастроек = "";
//	Иначе
//		КлючНастроек = КлючНазначенияИспользования;
//	КонецЕсли;
//	
//	НавигационнаяСсылка = "e1cib/app/Обработка.ЖурналДокументовПродажи";
//	
//	ВосстановитьНастройки(Параметры);
//	
//	ТЗХозОперацииИТипыДокументов = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(ОписаниеОперацийИТиповДокументов(),
//		ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНастроек);
//	
//	ИспользоватьАктыРасхожденийПослеОтгрузкиПоПередачамХранителю = ПолучитьФункциональнуюОпцию(
//		"ИспользоватьАктыРасхожденийПослеОтгрузки");
//	ИспользоватьАктыРасхожденийПослеПриемкиПоПоступлениямТоваровОтХранителя = ПолучитьФункциональнуюОпцию(
//		"ИспользоватьАктыРасхожденийПослеПриемки");
//	
//	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеОтгрузки") Тогда
//		СтрокиКУдалению = ТЗХозОперацииИТипыДокументов.НайтиСтроки(Новый Структура("ПолноеИмяДокумента",Метаданные.Документы.АктОРасхожденияхПослеОтгрузки.ПолноеИмя()));
//		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
//			Если СтрокаКУдалению.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи Тогда
//				ТЗХозОперацииИТипыДокументов.Удалить(СтрокаКУдалению);
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//	Если Не ИспользоватьАктыРасхожденийПослеОтгрузкиПоПередачамХранителю Тогда
//		СтрокиКУдалению = ТЗХозОперацииИТипыДокументов.НайтиСтроки(Новый Структура("ПолноеИмяДокумента, ХозяйственнаяОперация",
//																	Метаданные.Документы.АктОРасхожденияхПослеОтгрузки.ПолноеИмя(),
//																	Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи));
//		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
//			ТЗХозОперацииИТипыДокументов.Удалить(СтрокаКУдалению);
//		КонецЦикла;
//	КонецЕсли;
//	
//	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеПриемки") Тогда
//		СтрокиКУдалению = ТЗХозОперацииИТипыДокументов.НайтиСтроки(Новый Структура("ПолноеИмяДокумента",
//																					Метаданные.Документы.АктОРасхожденияхПослеПриемки.ПолноеИмя()));
//		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
//			Если СтрокаКУдалению.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтХранителя Тогда
//				ТЗХозОперацииИТипыДокументов.Удалить(СтрокаКУдалению);
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//	Если Не ИспользоватьАктыРасхожденийПослеПриемкиПоПоступлениямТоваровОтХранителя Тогда
//		СтрокиКУдалению = ТЗХозОперацииИТипыДокументов.НайтиСтроки(Новый Структура("ПолноеИмяДокумента, ХозяйственнаяОперация",
//																	Метаданные.Документы.АктОРасхожденияхПослеПриемки.ПолноеИмя(),
//																	Перечисления.ХозяйственныеОперации.ВозвратОтХранителя));
//		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
//			ТЗХозОперацииИТипыДокументов.Удалить(СтрокаКУдалению);
//		КонецЦикла;
//	КонецЕсли;
//	
//	ХозяйственныеОперацииИДокументы.Загрузить(ТЗХозОперацииИТипыДокументов);
//	
//	ПрослеживаемостьОтбор();
//	
//	НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов);
//	
//	ЗаполнитьСписокВыбораМенеджера();
//	
//	ИспользуемыеТипыДокументов = ТЗХозОперацииИТипыДокументов.ВыгрузитьКолонку("ТипДокумента");
//	
//	// СтандартныеПодсистемы.РаботаСКонтрагентами
//	ПроверкаКонтрагентов.ПриСозданииНаСервереСписокДокументов(СписокДокументыПродажи);
//	
//	Если ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно() Тогда
//		Элементы.ЕстьОшибкиПроверкиКонтрагентов.Видимость = Истина;
//	КонецЕсли;
//	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
//		
//	// ИнтеграцияС1СДокументооборотом
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаГлобальныеКоманды);
//	// Конец ИнтеграцияС1СДокументооборотом

//	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
//	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
//	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
//	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
//	ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО = Элементы.ПредставлениеСостояния;
//	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
//	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
//	
//	// ЭлектронноеВзаимодействие.ТорговыеПредложения
//	ТорговыеПредложения.ПриСозданииПодсказокФормы(ЭтотОбъект, Элементы.ПодсказкиБизнесСеть);
//	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
//	
//// ПроверкаДокументовВРеглУчете
//	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
//	ЗаполнитьЗначенияСвойств(СвойстваСписка, СписокДокументыПродажи);
//	//++ НЕ УТ
//	ПроверкаДокументовСервер.ДоработатьЗапросДинамическогоСпискаЖурналаДокументов(СвойстваСписка.ТекстЗапроса, "РеестрДокументовПереопределяемый");
//	//-- НЕ УТ
//	//СвойстваСписка.ТекстЗапроса = СтрЗаменить(СвойстваСписка.ТекстЗапроса, "&СтатусПроверки КАК СтатусПроверки", "НЕОПРЕДЕЛЕНО КАК УдаленСтатусПроверки");
//	//СвойстваСписка.ТекстЗапроса = СтрЗаменить(СвойстваСписка.ТекстЗапроса, "&ИндикаторПроверки КАК ИндикаторПроверки", "НЕОПРЕДЕЛЕНО КАК УдаленИндикаторПроверки");
//	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокДокументыПродажи, СвойстваСписка);
//	// Конец ПроверкаДокументовВРеглУчете
//		
//	ДополнительныеПараметры = Новый Структура("МестоРазмещенияДанныхПроверкиРегл", Элементы.ГруппаРеглПроверка);
//	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
//	
//	// СтандартныеПодсистемы.ПодключаемыеКоманды
//	Если ЗначениеЗаполнено(ИспользуемыеТипыДокументов) Тогда
//		ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
//		ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
//		ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокДокументыПродажиКоманднаяПанель;
//		ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
//	КонецЕсли;
//	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
//	
//	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
//	УчетОригиналовПервичныхДокументов.ПриСозданииНаСервере_ФормаСписка(ЭтотОбъект,Элементы.СписокДокументыПродажи, Элементы.ПредставлениеСостояния);
//	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
//	
//	
//КонецПроцедуры


//&Вместо("НастроитьФормуПоВыбраннымОперациямИДокументам")
//Процедура Расш1_НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов)
//	
//	ДанныеРабочегоМеста = ОбщегоНазначенияУТ.ДанныеРабочегоМеста(ТЗХозОперацииИТипыДокументов,
//		КлючНазначенияФормыПоУмолчанию(), НСтр("ru = 'Документы продажи (все)';
//												|en = 'Sales documents (all)'"));
//	
//	Заголовок   = ДанныеРабочегоМеста.ЗаголовокРабочегоМеста;
//	
//	ТекущийКлюч = ДанныеРабочегоМеста.КлючНазначенияИспользования;

//	УстановитьОтборыДинамическихСписков(ТекущийКлюч);
//	УстановитьВидимостьДоступность(ТекущийКлюч);
//	
//	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(Элементы.ИнформационнаяНадписьОтбор.Заголовок,
//		ХозяйственныеОперацииИДокументы, ОтборТипыДокументов, ОтборХозяйственныеОперации);
//	НастроитьКнопкиУправленияДокументами();
//	
//КонецПроцедуры 

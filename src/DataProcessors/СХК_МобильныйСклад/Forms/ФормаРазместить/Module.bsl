&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.Адрес);

	Если СтруктураПараметров.Ячейка <> "" Тогда
		ЭтаФорма.ЯчейкаУп =  СтруктураПараметров.Ячейка;
	Иначе
		Сообщить("Не удалось создать документ отгрузки");	
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	АктивироватьПоискУпаковка();
КонецПроцедуры

&НаСервере
Процедура ОчиститьШКСервер()
	СканQRУп = "";
КонецПроцедуры




&НаКлиенте
Процедура СканQRУпИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Если ПроверкаНаЧисло(Текст) = Истина Тогда
		ОткрытьФормуСообщения("Отсканируйте QR");
		АктивироватьПоискУпаковка();
	Иначе
		Мас = Новый Массив;
		Если СтрНайти(Текст, ";") = 0 Тогда
			Если НайтиНоменклатуруПоСерии(Текст) = Истина Тогда
				ОткрытьФормуФормаСканШК(Текст);		
			Иначе
				ОткрытьФормуСообщения("Номенклатура не найдена"); 
				АктивироватьПоискУпаковка();
			КонецЕсли;
		Иначе
			Мас = Разложить(Текст,";");
			Если НайтиНоменклатуруПоСерии(Мас[0]) = Истина Тогда 
				ЗаполнитьУпаковкаУп(Мас[1]); 
				АктивироватьКолУп();	
			Иначе
				ОткрытьФормуСообщения("Номенклатура не найдена"); 
				АктивироватьПоискУпаковка();
			КонецЕсли;
				
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АктивироватьКолУп() 
	ОчиститьШКСервер(); 
	Элементы.КолУп.ОбновитьТекстРедактирования();
	Элементы.КолУп.Видимость = Ложь;
	Элементы.КолУп.Видимость = Истина;
	ЭтаФорма.ТекущийЭлемент = Элементы.КолУп; 
	# Если МобильныйКлиент Тогда
		НачатьРедактированиеЭлемента();
	#КонецЕсли
	
КонецПроцедуры  


&НаСервере
Функция НайтиНоменклатуруПоСерии(Сер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДвиженияСерийТоваров.Номенклатура КАК Номенклатура,
	|	ДвиженияСерийТоваров.Серия КАК Серия
	|ИЗ
	|	РегистрНакопления.ДвиженияСерийТоваров КАК ДвиженияСерийТоваров
	               |ГДЕ
	               |	ДвиженияСерийТоваров.Серия.Наименование = &Наименование
	               |	И (ДвиженияСерийТоваров.СкладскаяОперация = ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПриемкаПродукцииИзПроизводства)
	               |			ИЛИ ДвиженияСерийТоваров.СкладскаяОперация = ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаКлиенту)
	               |			ИЛИ ДвиженияСерийТоваров.СкладскаяОперация = ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПриемкаСобранныхКомплектов))

	|УПОРЯДОЧИТЬ ПО 	Регистратор УБЫВ";
	Запрос.УстановитьПараметр("Наименование",Сер);
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество()=1 Тогда
		ЭтаФорма.Серия = Рез[0].Серия;
		ЭтаФорма.Номенклатура = Рез[0].Номенклатура;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура АктивироватьПоискУпаковка() Экспорт 

	ЭтаФорма.Элементы.СканQRУп.РедактированиеТекста = Истина;
	ОчиститьШКСервер(); 
	Элементы.СканQRУп.ОбновитьТекстРедактирования();
	Элементы.СканQRУп.Видимость = Ложь;
	Элементы.СканQRУп.Видимость = Истина;
	ЭтаФорма.ТекущийЭлемент = Элементы.СканQRУп; 
	# Если МобильныйКлиент Тогда
		НачатьРедактированиеЭлемента();
	#КонецЕсли
	
КонецПроцедуры   


&НаКлиенте
Процедура ОткрытьФормуСообщения(Сообщение) 
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ошибка",Строка(Сообщение));
	АдресПередаваемыхПараметров = ПоместитьВоВременноеХранилище(Отбор,Новый УникальныйИдентификатор);
	_Параметры = новый Структура("Адрес", АдресПередаваемыхПараметров);
	ОткрытьФорму("Обработка.СХК_МобильныйСклад.Форма.ФормаСообщений", _Параметры,ЭтаФорма, , , , ,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры   

&НаКлиенте
Процедура ОткрытьФормуФормаСканШК(Штр) 
		Отбор = Новый Структура;
		Отбор.Вставить("Штрих",Штр);
		Отбор.Вставить("Серия",ЭтаФорма.Серия);
		Отбор.Вставить("Номенклатура",ЭтаФорма.Номенклатура);
		//Отбор.Вставить("Ячейка",ЭтаФорма.ЯчейкаВыбор);
		АдресПередаваемыхПараметров = ПоместитьВоВременноеХранилище(Отбор,Новый УникальныйИдентификатор);
		_Параметры = новый Структура("Адрес", АдресПередаваемыхПараметров);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСообщенияСканШК", ЭтаФорма);
		ОткрытьФорму("Обработка.СХК_МобильныйСклад.Форма.ФормаСканШК", _Параметры,ЭтаФорма, , , , ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыСообщенияСканШК(Значение, ДопПараметры) Экспорт 
	Если Значение.Ош = Истина Тогда 
		ЗаполнитьУпаковкаУп(Значение.Штр);
	Иначе
		ОткрытьФормуСообщения(Строка(Значение.Ошибка));	
	КонецЕсли;
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьУпаковкаУп(Штр) 

    ЭтаФорма.УпаковкаУп = СХК_ТСДСклад.ЗаполнитьУпаковкаУп(Штр,ЭтаФорма.Номенклатура);

КонецПроцедуры

///////////////
Функция Разложить(Знач Стр, Разделитель = ";") Экспорт
	
	Список = Новый Массив();
	Длина = СтрДлина(Разделитель);
	
	Стр = СокрЛП(Стр);
	Поз = Найти(Стр, Разделитель);
	
	Пока 0 < Поз Цикл
		Список.Добавить(СокрП(Лев(Стр, Поз-1)));
		
		Стр = СокрЛ(Сред(Стр, Поз+Длина));
		Поз = Найти(Стр, Разделитель);
	КонецЦикла;
	
	Список.Добавить(Стр);
	
	Возврат Список;
	
КонецФункции


&НаСервере
Функция ПроверкаНаЧисло(НашаСтрокаДляРазбора) Экспорт
	Если ТипЗнч(НашаСтрокаДляРазбора) = Тип("Число") Тогда
		Возврат Истина
	Иначе
		Если ТипЗнч(НашаСтрокаДляРазбора) = Тип("Строка") Тогда
			Если НашаСтрокаДляРазбора = "" Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			ПМ = Число(НашаСтрокаДляРазбора);
		Исключение
			Возврат Ложь;
		КонецПопытки;
		Возврат Истина;
	КонецЕсли;
КонецФункции 

&НаКлиенте
Процедура Разместить(Команда)
	О = ПринятьРазместитьНаСервере();
	
	Если О.Ош = Ложь И О.РасКолОстаток = 0 Тогда
		ЭтаФорма.Закрыть(); 
	ИначеЕсли О.Ош = Ложь И О.РасКолОстаток >0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
		ТекстОш = "Не хвататет " + Строка(О.РасКолОстаток) + " шт.";
		ПоказатьПредупреждение(Оповещение,ТекстОш,10,"Внимание!!!");
	ИначеЕсли О.Ош = Истина Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
		ПоказатьПредупреждение(Оповещение,"Произошла Ошибка",10,"Внимание!!!");
	КонецЕсли;

КонецПроцедуры  


&НаКлиенте
Процедура ПослеЗакрытияПредупреждение(Параметры) Экспорт
	ЭтаФорма.Закрыть();
КонецПроцедуры


&НаСервере
Функция ПринятьРазместитьНаСервере() 
	Ош = Истина;
	РасКол = ЭтаФорма.КолУп*ЭтаФорма.УпаковкаУп.Числитель;
	РасКолОстаток = 0;
	
	Буфер = Справочники.СХК_СкладЯчейки.НайтиПоНаименованию("Буфер");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СХК_ТоварыНаСкладеОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	|ИЗ
	|	РегистрНакопления.СХК_ТоварыНаСкладе.Остатки КАК СХК_ТоварыНаСкладеОстатки
	|ГДЕ
	|	СХК_ТоварыНаСкладеОстатки.Номенклатура = &Номенклатура
	|	И СХК_ТоварыНаСкладеОстатки.Серия = &Серия
	|	И СХК_ТоварыНаСкладеОстатки.Ячейка = &Ячейка"; 
	Запрос.УстановитьПараметр("Номенклатура",ЭтаФорма.Номенклатура);
	Запрос.УстановитьПараметр("Серия",Строка(ЭтаФорма.Серия));
	Запрос.УстановитьПараметр("Ячейка",Буфер);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Итог("ВНаличииОстаток")>=РасКол Тогда
		//ПереместитьИзБуфераВсе();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	СХК_Перемещение.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СХК_Перемещение КАК СХК_Перемещение
		|ГДЕ
		|	СХК_Перемещение.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И СХК_Перемещение.ПометкаУдаления = &ПометкаУдаления
		|	И СХК_Перемещение.Проведен = &Проведен"; 
		Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);  
		Запрос.УстановитьПараметр("Проведен", Истина);
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата())); 
		
		Рез = Запрос.Выполнить().Выбрать();
		
		Если Рез.Следующий() Тогда
			ТекДок = Рез.Ссылка.ПолучитьОбъект();
		Иначе
			ТекДок = Документы.СХК_Перемещение.СоздатьДокумент(); 
			ТекДок.Дата =ТекущаяДата(); 
		КонецЕсли;
		НоваяСтрока = ТекДок.ТЧТовары.Добавить();
		НоваяСтрока.Номенклатура = ЭтаФорма.Номенклатура;
		НоваяСтрока.Серия = ЭтаФорма.Серия;
		НоваяСтрока.ТекЯчейка = Буфер; 
		НоваяСтрока.НЯчейка = ЭтаФорма.ЯчейкаУп; 
		НоваяСтрока.Количество = РасКол;
		НоваяСтрока.Время = ТекущаяДата();
		
		Попытка
			ТекДок.Записать(РежимЗаписиДокумента.Проведение);
			Ош = Ложь;
		Исключение
			Ош = Истина;
		КонецПопытки;				
	Иначе
			//////////////////////Перемещаем что есть в буфере  
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	СХК_Перемещение.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СХК_Перемещение КАК СХК_Перемещение
			|ГДЕ
			|	СХК_Перемещение.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И СХК_Перемещение.ПометкаУдаления = &ПометкаУдаления
			|	И СХК_Перемещение.Проведен = &Проведен"; 
			Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);  
			Запрос.УстановитьПараметр("Проведен", Истина);
			Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ТекущаяДата()));
			Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата())); 
			
			РезПеремещение = Запрос.Выполнить().Выбрать();
			
			Если РезПеремещение.Следующий() Тогда
				ТекДок = РезПеремещение.Ссылка.ПолучитьОбъект();
			Иначе
				ТекДок = Документы.СХК_Перемещение.СоздатьДокумент(); 
				ТекДок.Дата =ТекущаяДата(); 
			КонецЕсли;
			НоваяСтрока = ТекДок.ТЧТовары.Добавить();
			НоваяСтрока.Номенклатура = ЭтаФорма.Номенклатура;
			НоваяСтрока.Серия = ЭтаФорма.Серия;
			НоваяСтрока.ТекЯчейка = Буфер; 
			НоваяСтрока.НЯчейка = ЭтаФорма.ЯчейкаУп; 
			НоваяСтрока.Количество = Рез.Итог("ВНаличииОстаток");
			НоваяСтрока.Время = ТекущаяДата();
			Попытка
				ТекДок.Записать(РежимЗаписиДокумента.Проведение);
				Ош = Ложь;
			Исключение
				Ош = Истина;
			КонецПопытки;				
			
			//////////////////////Создаем поступление на остаток  
			РасКолОстаток = РасКол - Рез.Итог("ВНаличииОстаток");
	КонецЕсли;
	РезФункции = Новый Структура;
	РезФункции.Вставить("Ош",Ош);
	РезФункции.Вставить("РасКолОстаток",РасКолОстаток);
	Возврат РезФункции;
КонецФункции


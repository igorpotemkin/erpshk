&Вместо("СформироватьПечатнуюФормуЗаказНаПеремещение")
Функция СформироватьПечатнуюФормуЗаказНаПеремещениеШК(МассивОбъектов, ОбъектыПечати)
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	Колонка = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(Колонка);
	
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаПеремещение";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаПеремещение.ПФ_MXL_ЗаказНаПеремещение");
	ОбластьЗаголовкаПеремещение         = Макет.ПолучитьОбласть("ЗаголовокПеремещение");
	ОбластьЗаголовкаВнутренняяПередача  = Макет.ПолучитьОбласть("ЗаголовокВнутренняяПередача");
	
	Если ВыводитьКоды Тогда
		
		ОбластьКодовШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьКодовШапка.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;
		
		ОбластьКодовСтрока = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьКодовПодвал = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
		
	Иначе
		
		ОбластьТовары = Макет.Область("Товар");
		ОбластьТовары.ШиринаКолонки = ОбластьТовары.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		
	КонецЕсли;
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		
		ОбластьУпаковокШапка  =  Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
		ОбластьУпаковокСтрока =  Макет.ПолучитьОбласть("Строка|КолонкаУпаковок");
		ОбластьУпаковокПодвал =  Макет.ПолучитьОбласть("Подвал|КолонкаУпаковок");
		
	Иначе
		
		ОбластьТовары = Макет.Область("Товар");
		ОбластьТовары.ШиринаКолонки = ОбластьТовары.ШиринаКолонки 
									  + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
									  + Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки;
									  
	КонецЕсли;
	
	ОбластьНомераШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанныхШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьКонецСтрокиШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	
	ОбластьНомераСтрока = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанныхСтрока = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьКонецСтрокиСтрока = Макет.ПолучитьОбласть("Строка|КонецСтроки");
	
	ОбластьНомераПодвал = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
	ОбластьДанныхПодвал = Макет.ПолучитьОбласть("Подвал|Товар");
	ОбластьКонецСтрокиПодвал = Макет.ПолучитьОбласть("Подвал|КонецСтроки");
	
	ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");
	
	ЗапросПоШапке = Новый Запрос;
	ЗапросПоШапке.Текст = 
		"ВЫБРАТЬ
		|	ЗаказНаПеремещение.Ссылка КАК Ссылка,
		|	ЗаказНаПеремещение.Номер КАК Номер,
		|	ЗаказНаПеремещение.Дата КАК Дата,
		|	ЗаказНаПеремещение.Организация.Префикс КАК Префикс,
		|	ЗаказНаПеремещение.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаказНаПеремещение.СкладОтправитель) КАК ОтправительПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаказНаПеремещение.СкладПолучатель) КАК ПолучательПредставление,
		|	ВЫБОР КОГДА ЗаказНаПеремещение.Организация.НаименованиеСокращенное = """" ТОГДА
		|		ЗаказНаПеремещение.Организация.Наименование
		|	ИНАЧЕ
		|		ЗаказНаПеремещение.Организация.НаименованиеСокращенное
		|	КОНЕЦ КАК ОрганизацияПредставление,
		|	ВЫБОР КОГДА ЗаказНаПеремещение.ОрганизацияПолучатель.НаименованиеСокращенное = """" ТОГДА
		|		ЗаказНаПеремещение.ОрганизацияПолучатель.Наименование
		|	ИНАЧЕ
		|		ЗаказНаПеремещение.ОрганизацияПолучатель.НаименованиеСокращенное
		|	КОНЕЦ КАК ОрганизацияПолучательПредставление,
		|	ЗаказНаПеремещение.Ответственный.ФизическоеЛицо КАК Менеджер
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
		|ГДЕ
		|	ЗаказНаПеремещение.Ссылка В(&МассивДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	
	ЗапросПоШапке.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаПоШапке = ЗапросПоШапке.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекстЗапросаПоТоварам =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|
		|	СпрНоменклатура.Ссылка                                КАК Товар,
		|	СпрНоменклатура.НаименованиеПолное                    КАК ТоварНаименование,
		|	СпрНоменклатура.Код                                   КАК Код,
		|	СпрНоменклатура.Артикул                               КАК Артикул,
		|	ТаблицаТовары.Характеристика.НаименованиеПолное       КАК Характеристика,
		|	ТаблицаТовары.Серия                                   КАК Серия,
		|
		|	ВЫБОР КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
		|				ПРЕДСТАВЛЕНИЕССЫЛКИ(СпрНоменклатура.ЕдиницаИзмерения)
		|			ИНАЧЕ
		|				ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаТовары.Упаковка)
		|		КОНЕЦ                                             КАК ПредставлениеЕдининицыИзмеренияУпаковки,
		|
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СпрНоменклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
		|
		|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаТовары.Количество         КАК Количество
		|ИЗ
		|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО СпрНоменклатура.Ссылка = ТаблицаТовары.Номенклатура
		|ГДЕ
		|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
		|	И НЕ ТаблицаТовары.Отменено
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|
		|ИТОГИ ПО
		|	Ссылка";
	
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.Текст = ТекстЗапросаПоТоварам;
	ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаПоТабличнымЧастям = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	ШаблонОшибкиТовары = НСтр("ru = 'В документе %1 отсутствуют товары. Печать заказа на перемещение не требуется';
								|en = 'No goods in the document %1. It is not required to print the transfer order'");
	ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Пока ВыборкаПоШапке.Следующий() Цикл
		
		Шапка = ВыборкаПоШапке;
		Если Не ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка", Шапка.Ссылка)) Тогда
			
			ТекстОшибки = СтрШаблон(ШаблонОшибкиТовары, Шапка.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Шапка.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Если Не ПервыйДокумент Тогда
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Вывод шапки заказа
		Если Шапка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров Тогда
		
			ОбластьЗаголовка = ОбластьЗаголовкаПеремещение;
		
		Иначе // Хозяйственная операция - Внутренняя передача товаров
		
			ОбластьЗаголовка = ОбластьЗаголовкаВнутренняяПередача;
		
		КонецЕсли;
			
		НазваниеДокумента = НСтр("ru = 'Заказ на перемещение';
								|en = 'Transfer order'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОбластьЗаголовка.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(Шапка,
			НазваниеДокумента); 
		//
		QRСтрока = Строка(Шапка.Ссылка.УникальныйИдентификатор());
		Если Не ПустаяСтрока(QRСтрока) Тогда
			
			ДанныеQRКода = ДанныеQRКода(QRСтрока, 0, 190);
			
			Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
				КартинкаQRКода = Новый Картинка(ДанныеQRКода);
				ОбластьЗаголовка.Рисунки["QRКод"].Картинка = КартинкаQRКода;
			Иначе
				ТекстСообщения = "Не удалось сформировать QR-код для документа";
				#Если Клиент Тогда
					Сообщить(ТекстСообщения);
				#КонецЕсли
			КонецЕсли;
			
		КонецЕсли;
					
		//
		ОбластьЗаголовка.Параметры.Заполнить(Шапка);
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабДокумент, Макет, ОбластьЗаголовка, Шапка.Ссылка);
		ТабДокумент.Вывести(ОбластьЗаголовка);
		
		ТабДокумент.Вывести(ОбластьНомераШапка);
		
		Если ВыводитьКоды Тогда
			
			ТабДокумент.Присоединить(ОбластьКодовШапка);
			
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанныхШапка);
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			ТабДокумент.Присоединить(ОбластьУпаковокШапка);
			
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьКонецСтрокиШапка);
		
		ВыборкаСтрокТовары = ВыборкаПоТабличнымЧастям.Выбрать();
		
		НомерСтроки = 1;
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл
		
			ОбластьНомераСтрока.Параметры.НомерСтроки = НомерСтроки;
			ТабДокумент.Вывести(ОбластьНомераСтрока);
			
			Если ВыводитьКоды Тогда
				
				ОбластьКодовСтрока.Параметры.Артикул = ВыборкаСтрокТовары[Колонка];
				ТабДокумент.Присоединить(ОбластьКодовСтрока);
				
			КонецЕсли;
			
			ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанныхСтрока.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				СокрЛП(ВыборкаСтрокТовары.ТоварНаименование),
				СокрЛП(ВыборкаСтрокТовары.Характеристика),
				, // Упаковка
				СокрЛП(ВыборкаСтрокТовары.Серия),
				ДопПараметрыПредставлениеНоменклатуры);
			
			ТабДокумент.Присоединить(ОбластьДанныхСтрока);
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				
				ОбластьУпаковокСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабДокумент.Присоединить(ОбластьУпаковокСтрока);
				
			КонецЕсли;
			
			ОбластьКонецСтрокиСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьКонецСтрокиСтрока);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		ТабДокумент.Вывести(ОбластьНомераПодвал);
		
		Если ВыводитьКоды Тогда
			
			ТабДокумент.Присоединить(ОбластьКодовПодвал);
			
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанныхПодвал);
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			ТабДокумент.Присоединить(ОбластьУпаковокПодвал);
			
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьКонецСтрокиПодвал);
		
		// Вывод подписи.
		ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
		ОбластьПодписи.Параметры.ФИОМенеджер = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Шапка.Менеджер, Шапка.Дата);
		ТабДокумент.Вывести(ОбластьПодписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
	
КонецФункции    

//    
Функция КомпонентаФормированияQRКода()
        
        ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту для генерации QR-кода. Подробности в журнале регистрации.'");
        
        QRCodeGenerator = ПодключитьКомпонентуИзМакета("QRCodeExtension", "ОбщийМакет.КомпонентаПечатиQRКода");
        Если QRCodeGenerator = Неопределено Тогда
            #Если Клиент Тогда
                Сообщить(ТекстОшибки);
            #КонецЕсли
        КонецЕсли;
        
        Возврат QRCodeGenerator;
        
    КонецФункции
    
    Функция ПодключитьКомпонентуИзМакета(Идентификатор, ПолноеИмяМакета) Экспорт
        
        ПодключаемыйМодуль = Неопределено;
        
        Местоположение = ПолноеИмяМакета;
        СимволическоеИмя = Идентификатор + "SymbolicName";
        
        Если ПодключитьВнешнююКомпоненту(Местоположение, СимволическоеИмя) Тогда
            
            Попытка
                ПодключаемыйМодуль = Новый("AddIn." + СимволическоеИмя + "." + Идентификатор);
                Если ПодключаемыйМодуль = Неопределено Тогда
                    ВызватьИсключение НСтр("ru = 'Оператор Новый вернул Неопределено'");
                КонецЕсли;
            Исключение
                ПодключаемыйМодуль = Неопределено;
                ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
            КонецПопытки;
            
            Если ПодключаемыйМодуль = Неопределено Тогда
                
                ТекстОшибки = НСтр("ru = 'Не удалось создать объект внешней компоненты ""%1"", подключенной на сервере
                |из макета ""%2"",
                |по причине:
                |%3'");
                
                ЗаписьЖурналаРегистрации(
                НСтр("ru = 'Подключение внешней компоненты на сервере'",
                КодОсновногоЯзыка()),
                УровеньЖурналаРегистрации.Ошибка,,,
                ТекстОшибки);
                
            КонецЕсли;
            
        Иначе
            
            ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту ""%1"" на сервере
            |из макета ""%2""
            |по причине:
            |Метод ПодключитьВнешнююКомпоненту вернул Ложь.'");
            
            ЗаписьЖурналаРегистрации(
            НСтр("ru = 'Подключение внешней компоненты на сервере'",
            КодОсновногоЯзыка()),
            УровеньЖурналаРегистрации.Ошибка,,,
            ТекстОшибки);
            
        КонецЕсли;
        
        Возврат ПодключаемыйМодуль;
        
    КонецФункции
    
    Функция КодОсновногоЯзыка() Экспорт
        
        Возврат Метаданные.ОсновнойЯзык.КодЯзыка;
        
    КонецФункции
    
    // Возвращает двоичные данные для формирования QR-кода.
    //
    // Параметры:
    //  QRСтрока         - Строка - данные, которые необходимо разместить в QR-коде.
    //
    //  УровеньКоррекции - Число - уровень погрешности изображения, при котором данный QR-код все еще возможно 100 %
    //                             распознать.
    //                     Параметр должен иметь тип целого и принимать одно из 4 допустимых значений:
    //                     0 (7 % погрешности), 1 (15 % погрешности), 2(25 % погрешности), 3(35 % погрешности).
    //
    //  Размер           - Число - определяет длину стороны выходного изображения в пикселях.
    //                     Если минимально возможный размер изображения больше этого параметра - код сформирован не будет.
    //
    // Возвращаемое значение:
    //  ДвоичныеДанные  - буфер, содержащий байты PNG-изображения QR-кода.
    //
    // Пример:
    //  
    //  // Выводим на печать QR-код, содержащий в себе информацию зашифрованную по УФЭБС.
    //
    //  QRСтрока = УправлениеПечатью.ФорматнаяСтрокаУФЭБС(РеквизитыПлатежа);
    //  ТекстОшибки = "";
    //  ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, 0, 190, ТекстОшибки);
    //  Если Не ПустаяСтрока(ТекстОшибки)
    //      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
    //  КонецЕсли;
    //
    //  КартинкаQRКода = Новый Картинка(ДанныеQRКода);
    //  ОбластьМакета.Рисунки.QRКод.Картинка = КартинкаQRКода;
    //
    Функция ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер) Экспорт
        
        //УстановитьОтключениеБезопасногоРежима(Истина);
        ГенераторQRКода = КомпонентаФормированияQRКода();
        Если ГенераторQRКода = Неопределено Тогда
            Возврат Неопределено;
        КонецЕсли;
        
        Попытка
            ДвоичныеДанныеКартинки = ГенераторQRКода.GenerateQRCode(QRСтрока, УровеньКоррекции, Размер);
        Исключение
            ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование QR-кода'", КодОсновногоЯзыка()),
            УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        КонецПопытки;
        
        Возврат ДвоичныеДанныеКартинки;
        
    КонецФункции
//

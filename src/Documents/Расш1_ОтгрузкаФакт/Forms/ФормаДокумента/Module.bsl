
&НаКлиенте
Процедура Подбор(Команда)
	Парам = Новый Структура("РежимВыбора",Истина);
	ОбработкаВыбора = Новый ОписаниеОповещения("ОбработкаВыбораЗаказКлиента", ЭтаФорма, "ПодборРеализации");
	
	ОткрытьФорму("Документ.ЗаказКлиента.ФормаВыбора", Парам,ЭтаФорма, , , ,ОбработкаВыбора);
	
КонецПроцедуры 

Процедура ОбработкаВыбораЗаказКлиента(ВыбранноеЗначение, ИсточникВыбора) Экспорт	
	РезультатСсылка =  ВыбранноеЗначение;
	ДобавитьЗаказКлиента(РезультатСсылка)
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьЗаказКлиента(Заказ)
	ТекСтрока = Объект.ТЧОрдер.Добавить();//Объект.СХКТруд_Зависимости.Получить(Строка);
	ТекСтрока.ЗаказКлиента = Заказ; 
	КолШт = 0;
	Вес = 0;
	Для Каждого Строка из Заказ.Товары Цикл  
		Если Строка.Отменено = Ложь Тогда
		Вес = Вес +  Строка.Номенклатура.ВесЧислитель *Строка.КоличествоУпаковок; 
		Если Строка.Упаковка.Числитель = 0 Тогда
			КолШт = КолШт + Строка.КоличествоУпаковок;
		Иначе
			КолШт = КолШт + (Строка.Упаковка.Числитель * Строка.КоличествоУпаковок);
		КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ТекСтрока.Количество =  КолШт;
	ТекСтрока.Вес =  Вес;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элемент.ТекущаяСтраница.Имя = "ГруппаФото" Тогда 
		ЗаполнитьСписокДокЗаказ();
		ПолучитьФотоВеб();
	ИначеЕсли Элемент.ТекущаяСтраница.Имя = "ГруппаТЧ" Тогда
		ФотоHTML = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокДокЗаказ()
ЗаполнитьСписокДокЗаказНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокЗаказНаСервере()
	Если Объект.Проведен = Истина Тогда
		Если Объект.ТЧОтгрузка.Количество() >=1 Тогда
			Список = Новый СписокЗначений; 
			
			Для сч = 0 По Объект.ТЧОтгрузка.Количество() - 1 Цикл
				Список.Добавить(Объект.ТЧОтгрузка[сч].Отгрузка.Ссылка,Объект.ТЧОтгрузка[сч].Отгрузка); 
				
			КонецЦикла;
			Элементы.ОрдерФото.СписокВыбора.ЗагрузитьЗначения(Список.ВыгрузитьЗначения());
			ОрдерФото = Элементы.ОрдерФото.СписокВыбора[0].Значение;
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказФотоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) 
	ФотоHTML = ""; 
	Если Строка(Объект.Номер) <> "" Тогда 
		ТекОрдер = ТекущийОрдерФотоСервер(ВыбранноеЗначение); 
		ТекущийОрдерСборка(ВыбранноеЗначение);

		ФотоHTML = "192.168.88.146:8000/webcams/cams_get_list/"+Строка(Объект.Номер)+"/"+ТекОрдер; 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ТекущийОрдерСборка(ОрдерФото)
	
	ФотоКартинка = Неопределено;
	Для Каждого стр из Объект.ТЧОтгрузка Цикл
		Если Строка(стр.Отгрузка) = Строка(ОрдерФото) Тогда 
			К  = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Сборка_9fcb5f08f7b24e49b1404c22d9cf5487");
			Кар = 	УправлениеСвойствами.ЗначениеСвойства(стр.Отгрузка.Получатель, К);
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	Попытка
		спр = 	Справочники.Файлы.НайтиПоНаименованию(Кар);
		Сборка = РаботаСФайлами.ДанныеФайла(спр, УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
	Исключение
	КонецПопытки;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучитьФотоВеб() 
	//Объект.ФотоHTML = "192.168.88.189:8000/webcams/cams_get_list/"+Строка(Объект.Номер); 
	ФотоHTML = ""; 
	Если Строка(Объект.Номер) <> "" Тогда 
		ТекОрдер = ТекущийОрдерФотоСервер(ОрдерФото);
		ФотоHTML = "192.168.88.146:8000/webcams/cams_get_list/"+Строка(Объект.Номер)+"/"+ТекОрдер; 
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура МенюПовторнойОтправкиПисьма()
	Сообщения =  Новый СписокЗначений;
	Меню = Новый СписокЗначений; 
	Меню.Добавить(0, "Отправить еще раз");
	
	ТекПункт = Меню.ВыбратьЭлемент("Меню");
	Если ТекПункт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//
	Если ТекПункт.Значение = 0 Тогда
		ОтправитьПисьмо("skladsobinka@sobinkahleb.ru");	
		ОтправитьПисьмо("ohrana@smartbar.ru");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмо(емаил)
	Почта = Новый ИнтернетПочта; 
	Письмо = Новый ИнтернетПочтовоеСообщение;
	ТекстПисьма = "Добрый день!"+Символы.ПС;
	ТекстПисьма = ТекстПисьма + "Отгрузка номер " + Объект.Номер + " от " + Объект.Дата+Символы.ПС;
	ТекстПисьма = ТекстПисьма +" по заказам :" +Символы.ПС;
	Т = СписокЗаказов(); 
	Вес = 0;
	Для стр=0 по Т.Количество()-1 Цикл
		ТекстПисьма = ТекстПисьма + "№ " + Т[стр][0] +" от "+ Формат(Дата(Т[стр][1].Представление),"ДЛФ=Д")+" адрес: "+ Т[стр][2].Представление + Символы.ПС; 
		Вес = Вес + Число(Т[стр][3].Представление);
	КонецЦикла; 
	ТекстПисьма = ТекстПисьма + "Общий вес: " + Вес  + " кг."+ Символы.ПС;
	ТекстПисьма = ТекстПисьма + "Количество паллет: " + Объект.ПалетМест + Символы.ПС;
	ТекстПисьма = ТекстПисьма + "Дата и время заезда: " + Строка(Объект.Заезд) + "  Дата и время выезда: " + Строка(Объект.Выезд) + Символы.ПС;
	ТекстПисьма = ТекстПисьма + "Марка машины :" + Объект.Транспорт+ Символы.ПС; 
	ТекстПисьма = ТекстПисьма + "Водитель :" + Объект.ФИОВодителя+ Символы.ПС;
	
	ТекстПисьма = ТекстПисьма + "Комментарий: " + Объект.Комментарий+ Символы.ПС;
	
	Текст = Письмо.Тексты.Добавить(ТекстПисьма); 
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	Если НЕ ПроверитьСтатусОтправки() Тогда
		Письмо.Тема = Строка("Новая отгрузка ");
	Иначе
		Письмо.Тема = Строка("Корректировка отгрузки ");
	КонецЕсли;
	
	Письмо.Отправитель = "1c@smartbar.ru"; 
	Письмо.ИмяОтправителя = "Отгрузка";
	//emailto = "igor.potemkin33@yandex.ru";
	//emailto = "skladsobinka@sobinkahleb.ru";
	emailto = емаил;
	Письмо.Получатели.Добавить(emailto);
	Попытка 
		Почта.Подключиться(ПолучитьПрофильПочты()); Почта.Послать(Письмо); 
		УстановитьСтатусОтправки();
		
	Исключение 
		Сообщить(ОписаниеОшибки());	
	КонецПопытки;
	Почта.Отключиться(); 
	Письмо.Вложения.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСтатусОтправки()  
	Возврат Объект.Отправленно;
КонецФункции


&НаКлиенте
Процедура ОтправитьПисьмоКоманда(Команда)
	Если НЕ ПроведенДок() Тогда
		Сообщить("Проведите документ!!!");
		Возврат;
	КонецЕсли;
	
	Если  ПроверкаСтатусОтправки() Тогда 
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		"Отправить заново?",
		РежимДиалогаВопрос.ДаНетОтмена,
		0, // таймаут в секундах
		КодВозвратаДиалога.Да, // (необ.) кнопка по умолчанию
		"" // (необ.) заголовок
	);    	Иначе
		ОтправитьПисьмо("skladsobinka@sobinkahleb.ru");	
		ОтправитьПисьмо("logist@smartbar.ru");	
		ОтправитьПисьмо("logist4@smartbar.ru");	
		//ОтправитьПисьмо("igor.potemkin33@yandex.ru");	
		ОтправитьПисьмо("ohrana@smartbar.ru");	
	
	КонецЕсли;	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
				ОтправитьПисьмо("skladsobinka@sobinkahleb.ru");	
		ОтправитьПисьмо("ohrana@smartbar.ru");	
		//Сообщить("Отправлено!");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПроверкаСтатусОтправки()
	Возврат Объект.Отправленно;
КонецФункции


&НаСервере
Функция СписокЗаказов()  
	М = Новый Массив;
	Для Каждого стр из Объект.ТЧОрдер Цикл 
		СЗ = Новый СписокЗначений;
		СЗ.Добавить("номер",Строка(стр.ЗаказКлиента.Номер));
		СЗ.Добавить("дата",Строка(стр.ЗаказКлиента.Дата)); 
		СЗ.Добавить("Адрес",Строка(стр.ЗаказКлиента.АдресДоставки));
		СЗ.Добавить("Вес",Число(стр.Вес)); 
		М.Добавить(СЗ);
	КонецЦикла;
	Возврат М;
КонецФункции


&НаСервере
Процедура УстановитьСтатусОтправки()  
	Объект.Отправленно = Истина;
	Элементы.ОтправитьПисьмо.Заголовок = "Отправить заново";
	Сообщить("Письмо отправлено");
КонецПроцедуры


&НаСервере
Функция ПроведенДок()
	
	Если Объект.Проведен Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьПрофильПочты()
	 
	Профиль = Новый ИнтернетПочтовыйПрофиль; 
	Профиль.АдресСервераSMTP = "smtp.mail.ru";
	Профиль.АдресСервераPOP3 = "pop.mail.ru";
	Профиль.ПортPOP3 = 995;
	Профиль.ПортSMTP = 465; 
	Профиль.Пользователь = "1c@smartbar.ru"; 
	Профиль.Пароль = "GrKV5YLckkiM5AsF8Byt"; 
	Профиль.ПользовательSMTP =  "1c@smartbar.ru"; 
	Профиль.ПарольSMTP = "GrKV5YLckkiM5AsF8Byt"; 
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
	Профиль.ИспользоватьSSLPOP3 = Истина;
	Профиль.ИспользоватьSSLSMTP = Истина;  

	Возврат Профиль;
КонецФункции 

&НаСервере
Процедура ПриОткрытииНаСервере()
	Если Объект.Отправленно Тогда
		Элементы.ОтправитьПисьмо.Заголовок = "Отправить заново";
	КонецЕсли;
	Если Объект.Статус = Перечисления.Расш1_СтатусОтгрузкаФакт.Отгружен Тогда
		Элементы.ЗагрузкаЗавершена.Доступность = Ложь;
		Элементы.ФотоСтарт.Доступность = Ложь;
		Элементы.ДатаЗагрузки.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
КонецПроцедуры

&НаСервере
Функция ТекущийОрдерФотоСервер(ОрдерФото)
	Номер = Неопределено;
	Для Каждого стр из Объект.ТЧОтгрузка Цикл
		Если Строка(стр.Отгрузка) = Строка(ОрдерФото) Тогда
			Номер =  стр.Отгрузка.Номер;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
Возврат Номер;	
КонецФункции

&НаКлиенте
Процедура ФотоСтарт(Команда) 
	Если НЕ ПроведенДок() Тогда
		Сообщить("Проведите документ!!!");
		Возврат;
	КонецЕсли;
	
	//СформироватьВложение();
	
	Парам = Новый Структура;
	Парам.Вставить("day",Строка(Формат(Объект.Дата,"ДФ=гггг-ММ-дд"))); 
	ТекОрдер = ТекущийОрдерФотоСервер(ОрдерФото);
	Парам.Вставить("rashorder",Строка(ТекОрдер));
	Парам.Вставить("order",Строка(Объект.Номер));
	Сервер = "192.168.88.146:8000/webcams/";
	Соединение =  Новый HTTPСоединение(Сервер,,,,,90,,);
	
	Заголовки = Новый Соответствие; 
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	//Масс = СоздатьПартнераНаСервере();
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON();
	ЗаписьJSON.ОткрытьФайл(КаталогВременныхФайлов()+"contr.json", , , ПараметрыЗаписи) ;
	ЗаписатьJSON(ЗаписьJSON, Парам);
	
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Парам);
	СтрJSON = ЗаписьJSON.Закрыть(); 
	
	
	Запрос = Новый HTTPЗапрос("start/",Заголовки);
	Запрос.УстановитьТелоИзСтроки("present="+СтрJSON); 
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	Соединение.ОтправитьДляОбработки(Запрос,ФайлРезультата);
	
	ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
	ТекстовыйФайлОтвет.Прочитать(ФайлРезультата,КодировкаТекста.UTF8);
	СтрокаОтветСервера = ТекстовыйФайлОтвет.ПолучитьТекст(); 
	Если  СтрокаОтветСервера = "ok" Тогда
		ФактПалетов();
		ФотоHTML = "";
		Адрес = "";
		Если Строка(Объект.Номер) <> "" Тогда
	    Соединение = Новый HTTPСоединение(
	        "192.168.88.146:8000/webcams/cams_get_list/",,,,,,);
	    Запрос = Новый HTTPЗапрос("/"+Строка(Объект.Номер)+"/"+Строка(ТекОрдер));
	 
	    Результат = Соединение.Получить(Запрос);
	 
	    //Сообщить("Нам вернули код: " + Результат.КодСостояния);
	   	ФотоHTML = Результат.ПолучитьТелоКакСтроку();	
		КонецЕсли;
	Иначе
		Сообщить("не удалось сделать фото");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФактПалетов()
	Объект.ФактПалетов = Объект.ФактПалетов + 1;	
КонецПроцедуры

&НаСервере
Процедура СменитьСтатус()
	 
	Элементы.ЗагрузкаЗавершена.Доступность = Ложь; 
	Элементы.ФотоСтарт.Доступность = Ложь;
	//Док = Объект.Ссылка.ПолучитьОбъект(); 
	//Док.ДатаЗагрузки = Объект.ДатаЗагрузки;
	//Док.Записать(РежимЗаписиДокумента.Запись);
	//Док = Объект.Ссылка.ПолучитьОбъект();
	Объект.Статус = Перечисления.Расш1_СтатусОтгрузкаФакт.Отгружен; 
//	Док.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры


&НаСервере
Функция ПроверитьКоличествоОтгрузка()
	
	Если Объект.ТЧОтгрузка.Количество() = 0 Тогда
		Ош = Ложь;
	Иначе
		Ош = Истина;		
	КонецЕсли;
	
	Возврат Ош;
	
КонецФункции

&НаСервере
Функция ПолучитьДокОтгрузка(сч) 
	
//	Для Каждого стр из Объект.ТЧОтгрузка Цикл
//		Если Строка(стр.Отгрузка) = ОрдерФото Тогда
//			Ссылка =  стр.Отгрузка.Ссылка;
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;	
//Возврат Ссылка;  
Мас = Новый Массив;
Мас.Добавить(Объект.ТЧОтгрузка[сч].Отгрузка.Ссылка);
Мас.Добавить(Объект.ТЧОтгрузка[сч].Отгрузка.Ссылка.Номер);
Возврат Мас; 
		
КонецФункции 


&НаСервере
Функция СписокДокОтгрузка()
	Возврат Объект.ТЧОтгрузка.Количество();
КонецФункции

&НаСервере
Функция НайтиВПФ()
	Возврат Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию("Расходный ордер на товары (внешняя QR-Код)");
КонецФункции

&НаСервере
Функция СформироватьМакет(Док) 
	ТаблДокум = Новый  ТабличныйДокумент;
	ОбъектМетаданных = "Документ.РасходныйОрдерНаТовары";
	ОбъектСсылка = Док.Ссылка;
	ВыполняемаяОбработка = НайтиВПФ();  
	ПечатнаяФорма = ВыполняемаяОбработка;
	ТабличныйДокумент.Очистить();
	
	Коллекция = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм("ПФ_РасходныйОрдерНаТоварыВнешняяФормаQR");
	Если Не ЗначениеЗаполнено(ВыполняемаяОбработка) Тогда
		МодульПечати = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки");
	Иначе
		МодульПечати = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(ВыполняемаяОбработка);
		Если МодульПечати = Неопределено Тогда
			ВызватьИсключение "Не удалось подключить внешнюю печатную форму "+Строка(ВыполняемаяОбработка);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ОбъектСсылка);
	
	Если Не ЗначениеЗаполнено(ВыполняемаяОбработка) Тогда
		МодульПечати.Печать(МассивОбъектов, ПечатнаяФорма.ДополнительныеПараметры, Коллекция, Новый СписокЗначений, ПараметрыВывода);
	Иначе
		МодульПечати.Печать(МассивОбъектов, Коллекция, Новый СписокЗначений, ПараметрыВывода);
	КонецЕсли;
	
	ТаблДокум = Коллекция[0].ТабличныйДокумент;	
	Возврат ТаблДокум;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИсточникиКомандПечати = УправлениеПечатью.ИсточникиКомандПечати();
	Для Каждого ТекОбъект Из ИсточникиКомандПечати Цикл
		Элементы.ОбъектМетаданных.СписокВыбора.Добавить(ТекОбъект.ПолноеИмя());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектМетаданныхПриИзменении(Элемент)
	ЗаполнитьСписокПечатныхФорм();
КонецПроцедуры



&НаСервере
Процедура ЗаполнитьСписокПечатныхФорм()
	
	ИсточникКоманд 			= Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных);
	ТаблицаКоманд 			= УправлениеПечатью.КомандыПечатиОбъекта(ИсточникКоманд);
	ВызовСерверногоМетода 	= Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода;
	Для Каждого КомандаПечати Из ТаблицаКоманд Цикл
		Если ПустаяСтрока(КомандаПечати.МенеджерПечати) Тогда
			Продолжить;
		КонецЕсли;
		Если КомандаПечати.ДополнительныеПараметры.Свойство("Ссылка") 
			И ЗначениеЗаполнено(КомандаПечати.ДополнительныеПараметры.Ссылка)
			И КомандаПечати.ДополнительныеПараметры.ВариантЗапуска <> ВызовСерверногоМетода Тогда
			Продолжить;
		КонецЕсли;
		ДанныеКоманды = Новый Структура("Представление, ВнешняяОбработка, МенеджерПечати, Идентификатор, ДополнительныеПараметры");
		ЗаполнитьЗначенияСвойств(ДанныеКоманды, КомандаПечати);
		Если КомандаПечати.ДополнительныеПараметры.Свойство("Ссылка") Тогда
			ДанныеКоманды.Вставить("ВнешняяОбработка", КомандаПечати.ДополнительныеПараметры.Ссылка);
		КонецЕсли;
		Элементы.ПечатнаяФорма.СписокВыбора.Добавить(ДанныеКоманды, КомандаПечати.Представление);
	КонецЦикла;
	
	Составляющие 							= СтрРазделить(ОбъектМетаданных, ".");
	Элементы.ОбъектСсылка.ОграничениеТипа 	= Новый ОписаниеТипов(Составляющие[0]+"Ссылка."+Составляющие[1]);
	
КонецПроцедуры	

//&НаКлиенте
//Процедура СформироватьВложение1()
//	//Для сч=0 ПО СписокДокОтгрузка()-1 Цикл 
//		ДокНомер = ТекущийОрдерФотоСервер(ОрдерФото);
//		Док = ПолучитьДокОтгрузка(ОрдерФото);
//		
//		Каталог = КаталогВременныхФайлов();
//		ИмяФайла = Каталог + ДокНомер + ".pdf"; 
//		
//		текТабдок=СформироватьМакет(Док); 
//		текТабдок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.PDF); 
//		
//		КартинкаИмяПараметра = "file";
//		КартинкаИмяФайла = ИмяФайла;
//		Картинка = Новый Картинка(ИмяФайла); // любым удобным способом, по факту нужны ДД изображения
//		// 
//		Разделитель = СтрЗаменить(Новый УникальныйИдентификатор(), "-", ""); // все что угодно, можно даже руками указать "razzdell", главное что бы оно было уникальное во всем тексте тела
//		
//		
//		Тело = Новый ПотокВПамяти();
//		ЗаписьДанных = Новый ЗаписьДанных(Тело, , , Символы.ВК + Символы.ПС, ""); // то самое переопределение разделителей               
//		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
//		ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=" + КартинкаИмяПараметра + "; filename=" + КартинкаИмяФайла);
//		ЗаписьДанных.ЗаписатьСтроку("Content-Type: image/jpeg");
//		ЗаписьДанных.ЗаписатьСтроку(""); // пустая строка для доп переноса и воспроизведения структуры тела
//		ЗаписьДанных.Записать(Картинка.ПолучитьДвоичныеДанные()); // добавляет данные но каретка остается после данных
//		ЗаписьДанных.ЗаписатьСтроку(""); // записать не добавляет переносов, добавляем их пустой строкой
//		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--"); // добавляются еще доп переносы, но они уже не на что не влияют, так же после разделителя добавляем "--", должно обозначать конец тела
//		ЗаписьДанных.Закрыть();
//		
//		ДанныеТела = Тело.ЗакрытьИПолучитьДвоичныеДанные(); // получаем дело в дд, можно и через запись в файл, просто лишний раз не трогаем диски и не делаем доп операций
//		
//		HTTPЗапрос = Новый HTTPЗапрос ;
//		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДанныеТела); // установили тело
//		HTTPЗапрос.Заголовки.Вставить("Content-Length", XMLСтрока(ДанныеТела.Размер()));
//		HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + разделитель);
//		HTTPЗапрос.Заголовки.Вставить("Cookie1", Объект.Номер); 
//		HTTPЗапрос.Заголовки.Вставить("Cookie2", Строка(ДокНомер)); 
//		HTTPЗапрос.Заголовки.Вставить("Cookie3", Формат(Объект.Дата,"ДФ=гггг-ММ-дд")); 
//		
//		Соединение = Новый HTTPСоединение("192.168.88.189:8000/bot/add_doc/");
//		
//		ОтветHTTP = Соединение.ОтправитьДляОбработки(HTTPЗапрос); // финал		//
//		
//	//КонецЦикла;
//КонецПроцедуры


&НаКлиенте
Процедура СформироватьВложение()
	Для сч=0 ПО СписокДокОтгрузка()-1 Цикл
		Док = ПолучитьДокОтгрузка(сч);
		
		Каталог = КаталогВременныхФайлов();
		ИмяФайла = Каталог + Док[1] + ".pdf"; 
		
		текТабдок=СформироватьМакет(Док[0]); 
		текТабдок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.PDF); 
		
		КартинкаИмяПараметра = "file";
		КартинкаИмяФайла = ИмяФайла;
		Картинка = Новый Картинка(ИмяФайла); // любым удобным способом, по факту нужны ДД изображения
		// 
		Разделитель = СтрЗаменить(Новый УникальныйИдентификатор(), "-", ""); // все что угодно, можно даже руками указать "razzdell", главное что бы оно было уникальное во всем тексте тела
		
		
		Тело = Новый ПотокВПамяти();
		ЗаписьДанных = Новый ЗаписьДанных(Тело, , , Символы.ВК + Символы.ПС, ""); // то самое переопределение разделителей               
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=" + КартинкаИмяПараметра + "; filename=" + КартинкаИмяФайла);
		ЗаписьДанных.ЗаписатьСтроку("Content-Type: image/jpeg");
		ЗаписьДанных.ЗаписатьСтроку(""); // пустая строка для доп переноса и воспроизведения структуры тела
		ЗаписьДанных.Записать(Картинка.ПолучитьДвоичныеДанные()); // добавляет данные но каретка остается после данных
		ЗаписьДанных.ЗаписатьСтроку(""); // записать не добавляет переносов, добавляем их пустой строкой
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--"); // добавляются еще доп переносы, но они уже не на что не влияют, так же после разделителя добавляем "--", должно обозначать конец тела
		ЗаписьДанных.Закрыть();
		
		ДанныеТела = Тело.ЗакрытьИПолучитьДвоичныеДанные(); // получаем дело в дд, можно и через запись в файл, просто лишний раз не трогаем диски и не делаем доп операций
		
		HTTPЗапрос = Новый HTTPЗапрос ;
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДанныеТела); // установили тело
		HTTPЗапрос.Заголовки.Вставить("Content-Length", XMLСтрока(ДанныеТела.Размер()));
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + разделитель);
		HTTPЗапрос.Заголовки.Вставить("Cookie1", Строка(Объект.Номер)); 
		HTTPЗапрос.Заголовки.Вставить("Cookie2", Строка(сч));
		HTTPЗапрос.Заголовки.Вставить("Cookie3", Строка(Док[1])); 
		HTTPЗапрос.Заголовки.Вставить("Cookie4", Строка(Формат(Объект.Дата,"ДФ=гггг-ММ-дд"))); 
		
		Соединение = Новый HTTPСоединение("192.168.88.146:8000/bot/add_doc/");
		
		ОтветHTTP = Соединение.ОтправитьДляОбработки(HTTPЗапрос); // финал		//
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаЗавершена(Команда)
	
	Если НЕ ПроверитьКоличествоОтгрузка() Тогда
		Сообщить("Заполните документы Расходные ордера");
		Возврат;
	КонецЕсли;
	
	
	СформироватьВложение();
	
	
	Парам = Новый Структура;
	Парам.Вставить("day",Строка(Формат(Объект.Дата,"ДФ=гггг-ММ-дд"))); 
	Парам.Вставить("order",Строка(Объект.Номер));
	Стр = "Отгрузка № " + Строка(Объект.Номер)+Символы.ПС;
	Стр = Стр + "от " + Строка(Формат(Объект.Дата,"ДЛФ=Д"))+Символы.ПС;
	Стр = Стр + "Марка машины " + Строка(Объект.Транспорт)+Символы.ПС;
	Стр = Стр + "Водитель " + Строка(Объект.ФИОВодителя);
	Парам.Вставить("text",Стр);

	Сервер = "192.168.88.146:8000/bot/";
	Соединение =  Новый HTTPСоединение(Сервер,,,,,90,,);
	
	Заголовки = Новый Соответствие; 
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON();
	ЗаписьJSON.ОткрытьФайл(КаталогВременныхФайлов()+"contr.json", , , ПараметрыЗаписи) ;
	ЗаписатьJSON(ЗаписьJSON, Парам);
	
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Парам);
	СтрJSON = ЗаписьJSON.Закрыть(); 
	
	
	Запрос = Новый HTTPЗапрос("start/",Заголовки);
	Запрос.УстановитьТелоИзСтроки("present="+СтрJSON); 
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	Соединение.ОтправитьДляОбработки(Запрос,ФайлРезультата);
	
	ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
	ТекстовыйФайлОтвет.Прочитать(ФайлРезультата,КодировкаТекста.UTF8);
	СтрокаОтветСервера = ТекстовыйФайлОтвет.ПолучитьТекст(); 
	Если СтрокаОтветСервера = "ok" Тогда
		СменитьСтатус();    
		ОчиститьРазмещениеОрдеров();
		ЭтаФорма.Закрыть(); 
	Иначе
		Сообщить("При отправке произошла ошибка, повторите операцию");
	КонецЕсли;

	
КонецПроцедуры


&НаСервере
Процедура ОчиститьРазмещениеОрдеров()  
	
	Для Каждого стр из Объект.ТЧОтгрузка Цикл
		НаборЗаписей = РегистрыСведений.СХК_РазмещениеОрдер.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.ДокументОрдер.Установить(стр.Отгрузка.Ссылка);
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтгрузкиНаСервере()
	Объект.ТЧОтгрузка.Очистить();
	Для Каждого стр из Объект.ТЧОрдер Цикл   
		Ссылка = стр.ЗаказКлиента.Ссылка;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|    СвязанныеДокументы.Ссылка
		|ИЗ
		|    КритерийОтбора.СвязанныеДокументы(&Ссылка) КАК СвязанныеДокументы";
		
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Рез = Запрос.Выполнить().Выгрузить();
		
		Для Каждого строка из Рез Цикл
			Если ТипЗнч(строка.Ссылка) = ТИП("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
				Т = Объект.ТЧОтгрузка.Добавить();
				Т.Отгрузка = строка.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьОтгрузки(Команда)
	ЗаполнитьОтгрузкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ТекОрдер = ТекущийОрдерФотоСервер(ОрдерФото);
	Соединение = Новый HTTPСоединение(
	"192.168.88.146:8000/webcams/cams_get_list/",,,,,,);
	Запрос = Новый HTTPЗапрос("/"+Строка(Объект.Номер)+"/"+Строка(ТекОрдер));
	
	Результат = Соединение.Получить(Запрос);
	ФотоHTML = Результат.ПолучитьТелоКакСтроку();	
КонецПроцедуры

//&НаСервере
//Процедура ТЧОрдерТКПриИзмененииНаСервере(Н)  
//	К  = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ТКТариф");
//	ТарифПлан = 	УправлениеСвойствами.ЗначениеСвойства(Объект.ТЧОрдер[Н].ТК, К);
//	Объект.ТЧОрдер[Н].ТарифПлан =  ТарифПлан;
//КонецПроцедуры

//&НаКлиенте
//Процедура ТЧОрдерТКПриИзменении(Элемент)
//	ТЧОрдерТКПриИзмененииНаСервере(ЭтаФорма.ТекущийЭлемент.ТекущаяСтрока);
//КонецПроцедуры

&НаСервере
Процедура ТранспортПриИзмененииНаСервере()
	Объект.АмортизацияТС =  Объект.Транспорт.СХК_Амортизация; 
	Объект.ПрочиРасходыТС =  Объект.Транспорт.СХК_ПрочиеРасходы;

КонецПроцедуры

&НаКлиенте
Процедура ТранспортПриИзменении(Элемент)
	ТранспортПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьИтогШтук() 
	КолШт = 0;
	Для Каждого стр из Объект.ТЧОрдер Цикл
		Для Каждого Строка из стр.ЗаказКлиента.Товары Цикл  
			Если Строка.Упаковка.Числитель = 0 Тогда
				КолШт = КолШт + Строка.КоличествоУпаковок;
			Иначе
				КолШт = КолШт + (Строка.Упаковка.Числитель * Строка.КоличествоУпаковок);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат КолШт;	

КонецФункции


&НаСервере
Процедура РасчетЗатратНаСервере() 
	Если  Объект.СтоимостьНаемнойМашины > 0 Тогда
		Попытка
		Затраты = Объект.АмортизацияТС + Объект.ГСМРуб + (Объект.Часы*281.25)+Объект.ПрочиРасходыТС+Объект.СтоимостьНаемнойМашины;
		ИтогоШтукПоОтгрузке = ПолучитьИтогШтук(); 
		Объект.ИтогоШтук = ИтогоШтукПоОтгрузке;
		ТФакт = 0;
		Для Каждого стр из  Объект.ТЧОрдер Цикл
			ШтПоСтроке = 0;
			Для Каждого Строка из стр.ЗаказКлиента.Товары Цикл   
			Если Строка.Упаковка.Числитель = 0 Тогда
				ШтПоСтроке = ШтПоСтроке + Строка.КоличествоУпаковок;
			Иначе
				ШтПоСтроке = ШтПоСтроке + (Строка.Упаковка.Числитель * Строка.КоличествоУпаковок);
			КонецЕсли;
			КонецЦикла; 
			стр.Количество = ШтПоСтроке;
			стр.ТарифФакт2 = Затраты/ИтогоШтукПоОтгрузке*ШтПоСтроке;
		КонецЦикла;
	Исключение
		Сообщить("Заполнены не ве показатели");
	КонецПопытки;

		
	Иначе
		
	Попытка
		Затраты = Объект.АмортизацияТС + Объект.ГСМРуб + (Объект.Часы*281.25)+Объект.ПрочиРасходыТС;
		ИтогоШтукПоОтгрузке = ПолучитьИтогШтук(); 
		Объект.ИтогоШтук = ИтогоШтукПоОтгрузке;
		ТФакт = 0;
		Для Каждого стр из  Объект.ТЧОрдер Цикл
			ШтПоСтроке = 0;
			Для Каждого Строка из стр.ЗаказКлиента.Товары Цикл   
			Если Строка.Упаковка.Числитель = 0 Тогда
				ШтПоСтроке = ШтПоСтроке + Строка.КоличествоУпаковок;
			Иначе
				ШтПоСтроке = ШтПоСтроке + (Строка.Упаковка.Числитель * Строка.КоличествоУпаковок);
			КонецЕсли;
			КонецЦикла; 
			стр.Количество = ШтПоСтроке;
			стр.ТарифФакт = Затраты/ИтогоШтукПоОтгрузке*ШтПоСтроке;
		КонецЦикла;
	Исключение
		Сообщить("Заполнены не ве показатели");
	КонецПопытки; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасчетЗатрат(Команда)
	РасчетЗатратНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Гелиос(Команда)
	ПолучитьДанныеГелиос();
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьДанныеГелиос()  
		Соединение = Новый HTTPСоединение(
		"192.168.88.50:8000/api", // сервер (хост)
		, // порт, по умолчанию для http используется 80, для https 443
		, // пользователь для доступа к серверу (если он есть)
		, // пароль для доступа к серверу (если он есть)
		, // здесь указывается прокси, если он есть
		600, // таймаут в секундах, 0 или пусто - не устанавливать
		// защищенное соединение, если используется https   http://192.168.88.189:8000/api/import_sales/?fname=ОЗОН.xlsx
		);
		ГосНомер = ПолучитьГосНомер(); 
		Запрос = Новый HTTPЗапрос("/gelios_report/?day="+Строка(Формат(Объект.ДатаЗагрузки,"ДФ=yyyy-MM-dd"))+"&transport="+Строка(ГосНомер));
		Результат = Соединение.Получить(Запрос);
		Если Результат.КодСостояния = 200 Тогда
			Соединение = Новый HTTPСоединение(
			"192.168.88.50:8000/"+Результат.Заголовки.Получить("Location"), // сервер (хост)  192.168.88.189:8000/static/reports/all_sales.json
			, // порт, по умолчанию для http используется 80, для https 443
			, // пользователь для доступа к серверу (если он есть)
			, // пароль для доступа к серверу (если он есть)
			, // здесь указывается прокси, если он есть
			, // таймаут в секундах, 0 или пусто - не устанавливать
			// защищенное соединение, если используется https      
			);
			
			Запрос = Новый HTTPЗапрос("/");
			Результат = Соединение.Получить(Запрос);
			
			РезультатОрдер = ПростоеЧтениеJSON(Результат.ПолучитьТелоКакСтроку()); 
			Если РезультатОрдер.Количество()>0 Тогда
				gelios = РезультатОрдер[0].gelios;  
				driver = РезультатОрдер[1].driver;
            	ЗаполнитьПоказатели(gelios,driver) ;

			КонецЕсли; 
		КонецЕсли;
		
	
КонецПроцедуры

Функция ПростоеЧтениеJSON(Данные)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Данные);  		
	Возврат ПрочитатьJSON(ЧтениеJSON);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказатели(гелиос,дравер)
	Объект.ГСМГелиос = гелиос.gsm ;  
	Объект.КМГелиос = гелиос.probeg ;
	ВремяСтр = гелиос.timedriver;
	Части = СтрРазделить(ВремяСтр, ":");
	Время = Дата(1, 1, 1, Части[0], Части[1], Части[2]);
	Объект.ЧасыГелиос = Время ; 
	
	Объект.Движение.Очистить();
	Для стр = 0 по дравер.Количество()-1 Цикл
		Т = Объект.Движение.Добавить();
		Т.НачальноеПоложение = дравер[стр].start;
		Т.КонечноеПоложение = дравер[стр].end;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьГосНомер()
	Возврат Объект.Транспорт.Код;	
КонецФункции


&НаСервере
Процедура ДоступностьЗавершенияЗагрузки()  
	Если Объект.ДатаЗагрузки <> Дата(1,1,1) Тогда
		Элементы.ЗагрузкаЗавершена.Доступность = Истина; 
	Иначе
		Элементы.ЗагрузкаЗавершена.Доступность = Ложь; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	ДоступностьЗавершенияЗагрузки();
КонецПроцедуры

&НаСервере
Процедура СтоимостьНаемнойМашиныПриИзмененииНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьНаемнойМашиныПриИзменении(Элемент)
	СтоимостьНаемнойМашиныПриИзмененииНаСервере();
КонецПроцедуры






